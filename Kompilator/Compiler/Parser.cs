// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-PIILLQS
// DateTime: 10.06.2021 16:24:44
// UserName: wpodm
// Input file <.\compiler.y - 10.06.2021 16:24:38>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Program=4,OpenBlock=5,Eof=6,
    CloseBlock=7,Int=8,Bool=9,Double=10,Coma=11,Semicolon=12,
    Assignment=13,And=14,Or=15,Equal=16,NotEqual=17,Greater=18,
    GreaterEqual=19,Less=20,LessEqual=21,Identificator=22,IntNumber=23,RealNumber=24,
    Boolean=25};

public struct ValueType
#line 7 ".\compiler.y"
{
public List<string> varNames;
public List<Compiler.INode> nodesList;
public string val;
public Compiler.Types types;
public Compiler.INode node;
public Compiler.ExpresionNode expresionNode;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[34];
  private static State[] states = new State[51];
  private static string[] nonTerms = new string[] {
      "type", "multideclarations", "body", "declaration", "statement", "singleOperation", 
      "expressionAssig", "expressionLogic", "expressionRelat", "expressionAddit", 
      "variable", "declarations", "statements", "start", "$accept", "Anon@1", 
      };

  static Parser() {
    states[0] = new State(new int[]{4,3},new int[]{-14,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{5,6},new int[]{-3,4});
    states[4] = new State(new int[]{6,5});
    states[5] = new State(-2);
    states[6] = new State(-5,new int[]{-12,7});
    states[7] = new State(new int[]{8,48,10,49,9,50,7,-9,22,-9,23,-9,24,-9,25,-9},new int[]{-13,8,-4,41,-1,42});
    states[8] = new State(new int[]{7,9,22,14,23,23,24,24,25,25},new int[]{-5,10,-6,11,-7,13,-8,17,-9,40,-10,37,-11,22});
    states[9] = new State(-3);
    states[10] = new State(-8);
    states[11] = new State(new int[]{12,12});
    states[12] = new State(-10);
    states[13] = new State(-11);
    states[14] = new State(new int[]{13,15,16,-28,17,-28,18,-28,19,-28,20,-28,21,-28,14,-28,15,-28,12,-28});
    states[15] = new State(new int[]{22,14,23,23,24,24,25,25},new int[]{-7,16,-8,17,-9,40,-10,37,-11,22});
    states[16] = new State(-12);
    states[17] = new State(new int[]{14,18,15,38,12,-13});
    states[18] = new State(new int[]{23,23,24,24,25,25,22,26},new int[]{-9,19,-10,37,-11,22});
    states[19] = new State(new int[]{16,20,17,27,18,29,19,31,20,33,21,35,14,-14,15,-14,12,-14});
    states[20] = new State(new int[]{23,23,24,24,25,25,22,26},new int[]{-10,21,-11,22});
    states[21] = new State(-17);
    states[22] = new State(-24);
    states[23] = new State(-25);
    states[24] = new State(-26);
    states[25] = new State(-27);
    states[26] = new State(-28);
    states[27] = new State(new int[]{23,23,24,24,25,25,22,26},new int[]{-10,28,-11,22});
    states[28] = new State(-18);
    states[29] = new State(new int[]{23,23,24,24,25,25,22,26},new int[]{-10,30,-11,22});
    states[30] = new State(-19);
    states[31] = new State(new int[]{23,23,24,24,25,25,22,26},new int[]{-10,32,-11,22});
    states[32] = new State(-20);
    states[33] = new State(new int[]{23,23,24,24,25,25,22,26},new int[]{-10,34,-11,22});
    states[34] = new State(-21);
    states[35] = new State(new int[]{23,23,24,24,25,25,22,26},new int[]{-10,36,-11,22});
    states[36] = new State(-22);
    states[37] = new State(-23);
    states[38] = new State(new int[]{23,23,24,24,25,25,22,26},new int[]{-9,39,-10,37,-11,22});
    states[39] = new State(new int[]{16,20,17,27,18,29,19,31,20,33,21,35,14,-15,15,-15,12,-15});
    states[40] = new State(new int[]{16,20,17,27,18,29,19,31,20,33,21,35,14,-16,15,-16,12,-16});
    states[41] = new State(-4);
    states[42] = new State(-6,new int[]{-16,43});
    states[43] = new State(-33,new int[]{-2,44});
    states[44] = new State(new int[]{22,45});
    states[45] = new State(new int[]{12,46,11,47});
    states[46] = new State(-7);
    states[47] = new State(-32);
    states[48] = new State(-29);
    states[49] = new State(-30);
    states[50] = new State(-31);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-15, new int[]{-14,3});
    rules[2] = new Rule(-14, new int[]{4,-3,6});
    rules[3] = new Rule(-3, new int[]{5,-12,-13,7});
    rules[4] = new Rule(-12, new int[]{-12,-4});
    rules[5] = new Rule(-12, new int[]{});
    rules[6] = new Rule(-16, new int[]{});
    rules[7] = new Rule(-4, new int[]{-1,-16,-2,22,12});
    rules[8] = new Rule(-13, new int[]{-13,-5});
    rules[9] = new Rule(-13, new int[]{});
    rules[10] = new Rule(-5, new int[]{-6,12});
    rules[11] = new Rule(-6, new int[]{-7});
    rules[12] = new Rule(-7, new int[]{22,13,-7});
    rules[13] = new Rule(-7, new int[]{-8});
    rules[14] = new Rule(-8, new int[]{-8,14,-9});
    rules[15] = new Rule(-8, new int[]{-8,15,-9});
    rules[16] = new Rule(-8, new int[]{-9});
    rules[17] = new Rule(-9, new int[]{-9,16,-10});
    rules[18] = new Rule(-9, new int[]{-9,17,-10});
    rules[19] = new Rule(-9, new int[]{-9,18,-10});
    rules[20] = new Rule(-9, new int[]{-9,19,-10});
    rules[21] = new Rule(-9, new int[]{-9,20,-10});
    rules[22] = new Rule(-9, new int[]{-9,21,-10});
    rules[23] = new Rule(-9, new int[]{-10});
    rules[24] = new Rule(-10, new int[]{-11});
    rules[25] = new Rule(-11, new int[]{23});
    rules[26] = new Rule(-11, new int[]{24});
    rules[27] = new Rule(-11, new int[]{25});
    rules[28] = new Rule(-11, new int[]{22});
    rules[29] = new Rule(-1, new int[]{8});
    rules[30] = new Rule(-1, new int[]{10});
    rules[31] = new Rule(-1, new int[]{9});
    rules[32] = new Rule(-2, new int[]{-2,22,11});
    rules[33] = new Rule(-2, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // start -> Program, body, Eof
#line 27 ".\compiler.y"
                           { Compiler.GenBody(ValueStack[ValueStack.Depth-2].node); }
#line default
        break;
      case 3: // body -> OpenBlock, declarations, statements, CloseBlock
#line 30 ".\compiler.y"
                                                       { CurrentSemanticValue.node = new Compiler.BodyNode(ValueStack[ValueStack.Depth-3].nodesList,ValueStack[ValueStack.Depth-2].nodesList); }
#line default
        break;
      case 4: // declarations -> declarations, declaration
#line 33 ".\compiler.y"
                                        { ValueStack[ValueStack.Depth-2].nodesList.Add(ValueStack[ValueStack.Depth-1].node); CurrentSemanticValue.nodesList = ValueStack[ValueStack.Depth-2].nodesList; }
#line default
        break;
      case 5: // declarations -> /* empty */
#line 34 ".\compiler.y"
               { CurrentSemanticValue.nodesList = new List<Compiler.INode>(); }
#line default
        break;
      case 6: // Anon@1 -> /* empty */
#line 37 ".\compiler.y"
                   { Compiler.actualType = ValueStack[ValueStack.Depth-1].types; }
#line default
        break;
      case 7: // declaration -> type, Anon@1, multideclarations, Identificator, Semicolon
#line 38 ".\compiler.y"
              {
                    if(Compiler.IsIdentyficatorOccupied(ValueStack[ValueStack.Depth-5].types,ValueStack[ValueStack.Depth-2].val))
                    {
                        Console.WriteLine("line: error: such variable name already exists");
                    }
                    else
                    {
                        ValueStack[ValueStack.Depth-3].varNames.Add(ValueStack[ValueStack.Depth-2].val);
                        CurrentSemanticValue.node = new Compiler.DeclarationNode(ValueStack[ValueStack.Depth-5].types,ValueStack[ValueStack.Depth-3].varNames);
                    }
              }
#line default
        break;
      case 8: // statements -> statements, statement
#line 51 ".\compiler.y"
                                   { ValueStack[ValueStack.Depth-2].nodesList.Add(ValueStack[ValueStack.Depth-1].node); CurrentSemanticValue.nodesList = ValueStack[ValueStack.Depth-2].nodesList; }
#line default
        break;
      case 9: // statements -> /* empty */
#line 52 ".\compiler.y"
              { CurrentSemanticValue.nodesList = new List<Compiler.INode>(); }
#line default
        break;
      case 10: // statement -> singleOperation, Semicolon
#line 55 ".\compiler.y"
                                        { CurrentSemanticValue.node = new Compiler.StatementNode(ValueStack[ValueStack.Depth-2].node); }
#line default
        break;
      case 11: // singleOperation -> expressionAssig
#line 58 ".\compiler.y"
                                  { CurrentSemanticValue.node = new Compiler.SingleOperationNode(ValueStack[ValueStack.Depth-1].expresionNode); }
#line default
        break;
      case 12: // expressionAssig -> Identificator, Assignment, expressionAssig
#line 62 ".\compiler.y"
            {
               CurrentSemanticValue.expresionNode = new Compiler.AssignmentExpresionNode(ValueStack[ValueStack.Depth-3].val, ValueStack[ValueStack.Depth-1].expresionNode);
            }
#line default
        break;
      case 13: // expressionAssig -> expressionLogic
#line 65 ".\compiler.y"
                              { CurrentSemanticValue.expresionNode = ValueStack[ValueStack.Depth-1].expresionNode; }
#line default
        break;
      case 14: // expressionLogic -> expressionLogic, And, expressionRelat
#line 68 ".\compiler.y"
                                                      { CurrentSemanticValue.expresionNode = new Compiler.AndLogicalExpresionNode(ValueStack[ValueStack.Depth-3].expresionNode,ValueStack[ValueStack.Depth-1].expresionNode); }
#line default
        break;
      case 15: // expressionLogic -> expressionLogic, Or, expressionRelat
#line 69 ".\compiler.y"
                                                     { CurrentSemanticValue.expresionNode = new Compiler.OrLogicalExpresionNode(ValueStack[ValueStack.Depth-3].expresionNode,ValueStack[ValueStack.Depth-1].expresionNode); }
#line default
        break;
      case 16: // expressionLogic -> expressionRelat
#line 70 ".\compiler.y"
                                  { CurrentSemanticValue.expresionNode = ValueStack[ValueStack.Depth-1].expresionNode; }
#line default
        break;
      case 17: // expressionRelat -> expressionRelat, Equal, expressionAddit
#line 73 ".\compiler.y"
                                                        {  CurrentSemanticValue.expresionNode = new Compiler.EqualExpresionNode(ValueStack[ValueStack.Depth-3].expresionNode, ValueStack[ValueStack.Depth-1].expresionNode); }
#line default
        break;
      case 18: // expressionRelat -> expressionRelat, NotEqual, expressionAddit
#line 74 ".\compiler.y"
                                                           {  CurrentSemanticValue.expresionNode = new Compiler.NotEqualExpresionNode(ValueStack[ValueStack.Depth-3].expresionNode, ValueStack[ValueStack.Depth-1].expresionNode); }
#line default
        break;
      case 19: // expressionRelat -> expressionRelat, Greater, expressionAddit
#line 75 ".\compiler.y"
                                                          {  CurrentSemanticValue.expresionNode = new Compiler.GreaterExpresionNode(ValueStack[ValueStack.Depth-3].expresionNode, ValueStack[ValueStack.Depth-1].expresionNode); }
#line default
        break;
      case 20: // expressionRelat -> expressionRelat, GreaterEqual, expressionAddit
#line 76 ".\compiler.y"
                                                               {  CurrentSemanticValue.expresionNode = new Compiler.GreaterEqualExpresionNode(ValueStack[ValueStack.Depth-3].expresionNode, ValueStack[ValueStack.Depth-1].expresionNode); }
#line default
        break;
      case 21: // expressionRelat -> expressionRelat, Less, expressionAddit
#line 77 ".\compiler.y"
                                                       {  CurrentSemanticValue.expresionNode = new Compiler.LessExpresionNode(ValueStack[ValueStack.Depth-3].expresionNode, ValueStack[ValueStack.Depth-1].expresionNode); }
#line default
        break;
      case 22: // expressionRelat -> expressionRelat, LessEqual, expressionAddit
#line 78 ".\compiler.y"
                                                            {  CurrentSemanticValue.expresionNode = new Compiler.LessEqualExpresionNode(ValueStack[ValueStack.Depth-3].expresionNode, ValueStack[ValueStack.Depth-1].expresionNode); }
#line default
        break;
      case 23: // expressionRelat -> expressionAddit
#line 79 ".\compiler.y"
                                  { CurrentSemanticValue.expresionNode = ValueStack[ValueStack.Depth-1].expresionNode; }
#line default
        break;
      case 24: // expressionAddit -> variable
#line 82 ".\compiler.y"
                           { CurrentSemanticValue.expresionNode = ValueStack[ValueStack.Depth-1].expresionNode; }
#line default
        break;
      case 25: // variable -> IntNumber
#line 85 ".\compiler.y"
                     { CurrentSemanticValue.expresionNode = new Compiler.ConstantExpresionNode(Compiler.Types.IntegerType, ValueStack[ValueStack.Depth-1].val); }
#line default
        break;
      case 26: // variable -> RealNumber
#line 86 ".\compiler.y"
                      { CurrentSemanticValue.expresionNode = new Compiler.ConstantExpresionNode(Compiler.Types.DoubleType, ValueStack[ValueStack.Depth-1].val); }
#line default
        break;
      case 27: // variable -> Boolean
#line 87 ".\compiler.y"
                   { CurrentSemanticValue.expresionNode = new Compiler.ConstantExpresionNode(Compiler.Types.BooleanType, ValueStack[ValueStack.Depth-1].val); }
#line default
        break;
      case 28: // variable -> Identificator
#line 88 ".\compiler.y"
                         { CurrentSemanticValue.expresionNode = new Compiler.VariableExpresionNode(ValueStack[ValueStack.Depth-1].val); }
#line default
        break;
      case 29: // type -> Int
#line 91 ".\compiler.y"
                   {CurrentSemanticValue.types = Compiler.Types.IntegerType;}
#line default
        break;
      case 30: // type -> Double
#line 92 ".\compiler.y"
                      {CurrentSemanticValue.types = Compiler.Types.DoubleType;}
#line default
        break;
      case 31: // type -> Bool
#line 93 ".\compiler.y"
                    {CurrentSemanticValue.types = Compiler.Types.BooleanType;}
#line default
        break;
      case 32: // multideclarations -> multideclarations, Identificator, Coma
#line 97 ".\compiler.y"
                    {
                        if(Compiler.IsIdentyficatorOccupied(Compiler.actualType,ValueStack[ValueStack.Depth-2].val))
                        {
                            Console.WriteLine("line: error: such variable name already exists");
                        }
                        else
                        {
                            ValueStack[ValueStack.Depth-3].varNames.Add(ValueStack[ValueStack.Depth-2].val);
                            CurrentSemanticValue.varNames = ValueStack[ValueStack.Depth-3].varNames;
                        }
                    }
#line default
        break;
      case 33: // multideclarations -> /* empty */
#line 108 ".\compiler.y"
                    { CurrentSemanticValue.varNames = new List<string>(); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 112 ".\compiler.y"

public Parser(Scanner scanner) : base(scanner) { }
#line default
}
}
